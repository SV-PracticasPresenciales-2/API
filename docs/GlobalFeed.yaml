openapi: 3.0.3
info:
  title: GlobalFeed
  description: Send messages globally and see others in one global feed
  version: 1.0.0
servers:
  - url: 'localhost:8081'
tags:
  - name: user
    description: User operations in the API
  - name: post
    description: Post operations in the API
  - name: security
    description: Security operations of the API
paths:
  /users:
    get:
      tags:
        - user
      summary: List all users
      description: Obtains a list of all users registered
      operationId: users
      responses:
        '200':
          description: Operation correct
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        '401':
          description: Not authorized or token expired
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode500'
  /user:
    get:
      tags:
        - user
      summary: Obtain the details of a single user
      description: Obtains detailed info of the user
      operationId: user
      parameters:
        - name: id
          in: path
          description: Obtain the user with the id given in the parameter
          required: false
          schema:
            type: integer
          examples:
            Example:
              value: 1
        - name: username
          in: path
          description: Obtain the user with the username given in the parameter
          required: false
          schema:
            type: string
          examples:
            Example:
              value: SrToska
      responses:
        '200':
          description: Operation correct
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        '400':
          description: Bad Request - Errors in the url or parameters
        '401':
          description: Not authorized or token expired
        '404':
          description: User not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode500'
    post:
      tags:
        - user
      summary: Add a new user to the application
      description: Add a new user to the application. The password is encrypted when added.
      operationId: user
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userDTO'
            examples:
              Example:
                value:
                  username: SrAntonio
                  password: 1234
                  name: Antonio
                  biography: Lorem Ipsum Dolor
                  phoneNumber: 600212121
        required: true
      responses:
        '200':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Not authorized or token expired
        '403':
          description: Incorrect values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode500'
      security:
        - bearerToken: [ ]
    put:
      tags:
        - user
      summary: Modify a user
      operationId: user
      description: Modify an existing user
      parameters:
        - name: id
          in: path
          description: ID of the user to modify
          required: true
          schema:
            type: integer
          examples:
            Example:
              value: 1
      requestBody:
        description: The new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userDTO'
            examples:
              Example:
                value:
                  username: SrAntonio
                  password: 1234
                  name: Antonio
                  biography: Lorem Ipsum Dolor
                  phoneNumber: 600212121
        required: true
      responses:
        '200':
          description: User modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Not authorized or token expired
        '404':
          description: User not found
        '403':
          description: Incorrect values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode500'
      security:
        - bearerToken: []
    delete:
      tags:
        - user
      summary: Delete a user
      operationId: user
      description: Delete an existin user. User with post cannot be removed. Delete the post first.
      parameters:
        - name: id
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: integer
          examples:
            Example:
              value: 1
      responses:
        '204':
          description: User deleted
        '401':
          description: Not authorized or token expired
        '403':
          description: Delete forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode403'
        '500':
          description: Error Interno
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode500'
      security:
        - bearerToken: [ ]
  /posts:
    get:
      tags:
        - post
      summary: Obtains all the posts
      description: Obtains all the post in the application
      operationId: user
      parameters:
        - name: username
          in: path
          description: Obtain the user with the id given in the parameter
          required: false
          schema:
            type: string
          examples:
            Example:
              value: SrAntonio
      responses:
        '200':
          description: Operation correct
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post'
        '400':
          description: Bad Request - Errors in the url or parameters
        '401':
          description: Not authorized or token expired
        '404':
          description: User not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode500'
    post:
      tags:
        - post
      summary: Add a new post
      description: Add a new post to the application.
      operationId: post
      requestBody:
        description: Create a post for the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postDTO'
            examples:
              Example:
                value:
                  message: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc euismod justo vel augue maximus, efficitur commodo risus maximus. Suspendisse bibendum suscipit diam, id vestibulum risus malesuada at.
                  userPost: 1
        required: true
      responses:
        '200':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post'
        '401':
          description: Not authorized or token expired
        '403':
          description: Incorrect values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode500'
      security:
        - bearerToken: [ ]
    put:
      tags:
        - post
      summary: Modify the message of the post
      operationId: post
      description: Modify the message of the post
      parameters:
        - name: id
          in: path
          description: ID of the post to modify
          required: true
          schema:
            type: integer
          examples:
            Example:
              value: 1
      requestBody:
        description: The new post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postDTO'
            examples:
              Example:
                value:
                  message: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc euismod justo vel augue maximus, efficitur commodo risus maximus. Suspendisse bibendum suscipit diam, id vestibulum risus malesuada at.
                  userPost: 1
        required: true
      responses:
        '200':
          description: Post modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Not authorized or token expired
        '404':
          description: User not found
        '403':
          description: Incorrect values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode500'
      security:
        - bearerToken: [ ]
    delete:
      tags:
        - post
      summary: Delete a post
      operationId: user
      description: Delete an existing post.
      parameters:
        - name: id
          in: path
          description: ID of the post to delete
          required: true
          schema:
            type: integer
          examples:
            Example:
              value: 1
      responses:
        '204':
          description: Post deleted
        '401':
          description: Not authorized or token expired
        '403':
          description: Delete forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode403'
        '500':
          description: Error Interno
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode500'
      security:
        - bearerToken: [ ]

  /register:
    post:
      tags:
        - security
      summary: Add a new user to the application
      operationId: register
      description: Register a new user into the application
      requestBody:
        description: The user to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userDTO'
            examples:
              Example:
                value:
                  username: SrAntonio
                  password: 1234
                  name: Antonio
                  biography: Lorem Ipsum Dolor
                  phoneNumber: 600212121
                  birthdate: 1990-01-01
        required: true
      responses:
        '200':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Not authorized or token expired
        '403':
          description: Incorrect values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode500'
  /token:
    post:
      tags:
        - security
      summary: Get the JWT Token
      operationId: token
      description: Deliver a valid token for using it in the securized endpoints
      requestBody:
        description: Data of the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
            examples:
              Exmaple:
                value:
                  username: SrAntonioJWT
                  password: 1234
        required: true
      responses:
        '200':
          description: Login correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Credentials invalid
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCode500'

components:
  schemas:
    user:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          description: Unique identifier of the user
          example: SrAntonio
        password:
          type: string
          description: Hash of the user password
          example: $2a$10$oNrBLgQSzoAVz9d5he.Lg.gYG79WKKEq.pRvRjJrhL23LdiPUD4lm
        name:
          type: string
          description: Name of the user
          example: Antonio
        biography:
          type: string
          description: Biography of the user
          example: Lorem Ipsum Dolor
        registerDate:
          type: string
          description: Date whe the user registered
          example: 1990-01-01
        phoneNumber:
          type: integer
          description: Phone number of the user
          example: 600212121
        active:
          type: boolean
          example: true
        roles:
          type: array
          example: []
      xml:
        name: user
    userDTO:
      type: object
      properties:
        username:
          type: string
          description: Unique identifier of the user
          example: SrAntonio
        password:
          type: string
          description: User password
          example: 1234
        name:
          type: string
          description: Name of the user
          example: Antonio
        biography:
          type: string
          description: Biography of the user
          example: Lorem Ipsum Dolor
        phoneNumber:
          type: integer
          description: Phone number of the user
          example: 600212121
        registerDate:
          type: string
          description: Date whe the user registered
          example: 1990-01-01
      xml:
        name: userDTO
    post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        message:
          type: string
          description: Message of the post
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc euismod justo vel augue maximus, efficitur commodo risus maximus. Suspendisse bibendum suscipit diam, id vestibulum risus malesuada at.
        postDate:
          type: string
          description: Date when the post is created
          example: 2023-05-12T15:53:06.5626221
        likes:
          type: integer
          description: Likes of the post
          example: 0
        userPost:
          $ref: '#/components/schemas/user'
      xml:
        name: user
    postDTO:
      type: object
      properties:
        message:
          type: string
          description: Message of the post
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc euismod justo vel augue maximus, efficitur commodo risus maximus. Suspendisse bibendum suscipit diam, id vestibulum risus malesuada at.
        userPost:
          type: integer
          description: ID of the user creating the post
          example: 1
      xml:
        name: user
    Login:
      type: object
      properties:
        username:
          type: string
          description: Username of the user
          example: SrAntonioJWT
        password:
          type: string
          description: Password of the user
          example: 1234
    Token:
      type: object
      properties:
        token:
          type: string
          description: Generated JWT Token
          example: eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoiU3JBbnRvbmlvSldUIiwiZXhwIjoxNjc5NjU3MDE3LCJpYXQiOjE2Nzk2NTM0MTcsInNjb3BlIjoiIn0.WHpLUAezcK4juJxOMotztWK4EVeXcwmfJ96fHq29Tgq8hbAV6kkQpTVvsqqLp2QiSt4ZpKclzFScOoEgaP1TgluqTHIO6Uth_Gjr8oX1Qlrb5rjdW8jXsSGflox0ZrNq4Czo-Yvm0bsHe1cKeHlNrqAw52jwdn0ELAaugxM3C19Bj9vcweH4z_xQq5GM2s1Y8Vytxzv_g-WI08-kosR9mklH5M0mbHcEcQ7czGsY4Le7qMyYLU_GaW4qqQljZbxJcRTpwXvQNmADzUZzLnG78XIO_Hs5vaRATX-cYq-747RNF3chFyus97PfzBQ3BMa-Zyw5Pb5_8UaZltbrpW58ng
        username:
          type: string
          description: Token of the user
          example: SrAntonioJWT
        roles:
          type: array
          description: User roles
          example: [ ]
    ErrorCode500:
      type: object
      properties:
        code:
          type: integer
          description: Code of the error
          example: 500
        message:
          type: string
          description: Error message
          example: Internal Server Error
        errors:
          type: array
          example: ""
      xml:
        name: ErrorCode500
    ErrorCode403:
      type: object
      properties:
        code:
          type: integer
          description: Error number
          example: 403
        message:
          type: string
          description: Error message
          example: Forbidden
        errors:
          type: array
          description: Errors descriptions
          example: Name cannot be empty
      xml:
        name: ErrorCode403

  securitySchemes:
    bearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT